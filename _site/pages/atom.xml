<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0">
  <channel>
    <title>禹墨的博客</title>
    <link>http://disheng54.github.io</link>
    <description>禹墨的博客</description>
    
      <item>
        <title>String源码阅读分析</title>
        <link>http://disheng54.github.io/2015/01/02/java-string1.html</link>
        <guid isPermaLink="true">http://disheng54.github.io/2015/01/02/java-string1.html</guid>
        <pubDate>Fri, 02 Jan 2015 00:00:00 +0800</pubDate>
        <description>&lt;pre&gt;&lt;code&gt;java String类是一个使用频率非常高的类。借助分析String类的源码，有助于更好的了解java中字符串的操作，写出更加有效率的代码。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;string-&quot;&gt;String 定义&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;   public final class String implements Serializable, Comparable&amp;lt;String&amp;gt;, CharSequence｛｝
   String首先是一个final类，它将不能被继承生成一个子类。String为什么要设置为final类型主要有2个方面的考虑。
   1、处于安全性的考虑.String类是java中一个非常底层的类，和操作系统进行的频繁的交互。如果可以String类可以被继承，用户就可能会重写String类的相关方法，这就提供破坏操作系统提供了机会，降低了java的宣称的安全性。
   2、效率的问题：String被定义为final类，那么它的所有方法都是final的，jvm编译器会内联所有的方法，此举可以让String类的效率使用50%，单凭这点就让人心动不已了。
   
   String类继承了Serializable ,所以String类是可序列化的。
   String类继承了Comparable, 所以String可以在集合里面，直接用sort()排序。
   String类继承实现了CharSequence ,所以String类本质上是一个字符序列。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;string--1&quot;&gt;String 成员变量&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;   //定义一个字符数组来存放 String的字符序列。
  private final char[] value;
  // 字符偏移的位置。
  private final int offset;
  //String的字符的个数。可以通过length() 方法返回。
  private final int count;
  //该字符串对应生产的一个哈希值。
  private int hashCode;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;string--2&quot;&gt;String 初始化&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;    String的类的初始化方法非常多，非常的丰富，所以初始化String对象还是很方便的。
    
    //声明一个空字符串
     public String() {
          value = EmptyArray.CHAR;
          offset = 0;
         count = 0;
    }
    
    利用byte[] 生成为字符串。
    //下面几个是利用字节数组转换一个新的String对象。将字节数组解码为字符串的字符集可以制定，也可使使用系统默认
    public String(byte[] data) ;//将一个字节数组生成一个新的字符串。使用默认字符集
    public String(byte[] data, int offset, int byteCount) ；将数组从offset位置后读取byteCount个字节转换为数组。使用默认字符集。
    
    将字节数据转换为从offset位置读取byteCount个字节转换为数组，使用用户指定的字符集，如果不支持该字符集，就抛出UnsupportedEncodingException.
    public String(byte[] data, int offset, int byteCount, String charsetName) throws UnsupportedEncodingException 
    将字节数据转换为从offset位置读取byteCount个字节转换为数组，使用用户指定的字符集，如果不支持该字符集，就抛出UnsupportedEncodingException.
    public String(byte[] data, int offset, int byteCount, Charset charset) ;
    利用用户制定的字符集.将byte数组生成一个新的字符串。
    public String(byte[] data, Charset charset) ;
    
    利用char[] 声明一个字符串。
     public String(char[] data)//将一个char数组声明一个新的String对象。内部调用public String(char[] data, int offset, int charCount)实现
      
      /**
    * 用char数组生命一个新的字符串变量。然后然后修改这个char数组将不再影响新生成的字符串。	    *
    * 当 data为null的时候，报空指针异常。
    * @throws IndexOutOfBoundsException
    *             if {@code charCount &amp;lt; 0 || offset &amp;lt; 0 || offset + charCount &amp;gt; data.length}
    */
   public String(char[] data, int offset, int charCount) {
      //检查是否越界
       if ((offset | charCount) &amp;lt; 0 || charCount &amp;gt; data.length - offset) {
           throw failedBoundsCheck(data.length, offset, charCount);
       }
       this.offset = 0;
       //新生成一个string对象 ，所有新生的char数组和旧的数组没有关联。
       this.value = new char[charCount];
       this.count = charCount;
       System.arraycopy(data, offset, value, 0, count);
   }
   
   /*
     * 直接用char数组生产一个字符串对象。其中char[]没有在new 一个新的数组，所以二者是一个char数组。	     * Does not range check, null check, or copy the character array.
     */
    String(int offset, int charCount, char[] chars) {
        this.value = chars;
        this.offset = offset;
        this.count = charCount;
    }
    
     /**
     * 用一个字符串的副本构造一个新的字符串。
     */
    public String(String toCopy) {
        value = (toCopy.value.length == toCopy.count)
                ? toCopy.value
                : Arrays.copyOfRange(toCopy.value, toCopy.offset, toCopy.offset + toCopy.length());
        offset = 0;
        count = value.length;
    }

     /**
     * 用字符缓冲区的字符序列构建一个字符串。是线程安全的。
     * {@code StringBuffer}.
     */
    public String(StringBuffer stringBuffer) {
        offset = 0;
        synchronized (stringBuffer) {
            value = stringBuffer.shareValue();
            count = stringBuffer.length();
        }
    }

    /**
     * 用int数组构建一个字符串，字符串的序列为unicode字符。	     *
     * @throws NullPointerException
     *             if {@code codePoints == null}.
     * @throws IllegalArgumentException
     *             if any of the elements of {@code codePoints} are not valid
     *             Unicode code points.
     * @throws IndexOutOfBoundsException
     *             if {@code offset} or {@code count} are not within the bounds
     *             of {@code codePoints}.
     * @since 1.5
     */
    public String(int[] codePoints, int offset, int count) {
        if (codePoints == null) {
            throw new NullPointerException(&quot;codePoints == null&quot;);
        }
        if ((offset | count) &amp;lt; 0 || count &amp;gt; codePoints.length - offset) {
            throw failedBoundsCheck(codePoints.length, offset, count);
        }
        this.offset = 0;
        //unicode 字符占用两个字节，int型数据为4个字节。所以要乘以二。
        this.value = new char[count * 2];
        int end = offset + count;
        int c = 0;
        for (int i = offset; i &amp;lt; end; i++) {
            c += Character.toChars(codePoints[i], this.value, c);
        }
        this.count = c;
    }

    /**
     * 构建一个新的string对象，包含字符串生成器的字符序列。
     *
     * @throws NullPointerException
     *             if {@code stringBuilder == null}.
     * @since 1.5
     */
    public String(StringBuilder stringBuilder) {
        if (stringBuilder == null) {
            throw new NullPointerException(&quot;stringBuilder == null&quot;);
        }
        this.offset = 0;
        this.count = stringBuilder.length();
        this.value = new char[this.count];
        stringBuilder.getChars(0, this.count, this.value, 0);
    }
&lt;/code&gt;&lt;/pre&gt;

</description>
      </item>
    
      <item>
        <title>Git常用操作</title>
        <link>http://disheng54.github.io/2015/01/01/git-git.html</link>
        <guid isPermaLink="true">http://disheng54.github.io/2015/01/01/git-git.html</guid>
        <pubDate>Thu, 01 Jan 2015 00:00:00 +0800</pubDate>
        <description>&lt;pre&gt;&lt;code&gt;以前一直使用GitHub的图像客户的来操作自己版本库的提交和更新。现在感觉效率不高，虽下定决心要在命令行下面操作Git。所以我有必要把平时要使用Git命令整理一份文档出来，从而可以更熟练的使用Git。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section&quot;&gt;添加文件 并交服务器&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git add  . ／git add 文件名
git commit -m &quot;更新说明&quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-1&quot;&gt;删除文件&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git rm 文件
git commit -m &quot;删除一个文件&quot;
git push
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-2&quot;&gt;更新文件的名字&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt; git mv 旧文件名字 新文件名字
 git commit－m &quot;更新文件名字&quot;
 git push
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;section-3&quot;&gt;在本地初始化一个版本库，然后提交到服务器版本&lt;/h3&gt;
&lt;pre&gt;&lt;code&gt;git init
git add .
git commit -m &quot;first commit&quot;
git remote add origin https://github.com/disheng54/yumoJava.git
git push -u origin master
&lt;/code&gt;&lt;/pre&gt;

</description>
      </item>
    
      <item>
        <title>Android http开发（－） 下载web页面</title>
        <link>http://disheng54.github.io/2015/01/01/android-http.html</link>
        <guid isPermaLink="true">http://disheng54.github.io/2015/01/01/android-http.html</guid>
        <pubDate>Thu, 01 Jan 2015 00:00:00 +0800</pubDate>
        <description>&lt;pre&gt;&lt;code&gt;Android中HTTP协议的开发还是比较重要的，熟练的掌握HTTP开发，有助于开发效率，给用户一个更加优秀的APP产品。Android 中使用HTTP协议开发可以使用java自带的API－HttpURLConnection，也可以使用Apache HttpClient。下面就以这两种方式分别实现对一个web页面的下载。
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;httpurlconnection-&quot;&gt;(-)HttpURLConnection 实现一个页面的下载。&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;   	/**
 * TODO
 * yumo 利用java的HttpConnectionURL 访问一个网站，并获取它的网站数据。
 * @param url 要下载web页面的网址，比如Http://www.baidu.com
 * @return
 * int
 * 2015-1-1
 */
private int getByJavaHttp(String webSite)
{
	int statusCode = -1;
	try {
		//见一个一个URL
		URL url = new URL(webSite);
		//访问web页面
		HttpURLConnection httpConnection = (HttpURLConnection) url.openConnection();
		//获取返回的状态吗。
		statusCode = httpConnection.getResponseCode();
		//获取下砸的web页面数据。
		InputStream inputStream = new BufferedInputStream(httpConnection.getInputStream());
		Reader reader = new InputStreamReader(inputStream);
		String strResult = &quot;&quot;;
		int c;
		while( (c = reader.read()) != -1)
		{
			strResult += String.valueOf((char)c);
		}
		Log.d(TAG,&quot;getByJavaHttp: &quot; + strResult);
	} catch (MalformedURLException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	return statusCode ;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&quot;apachehttpclient-web&quot;&gt;（二） 通过ApacheHttpClient 实现一个web页面的下载&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;/**
 * TODO
 * yumo 打印网站的数据 利用Apache httpClient
 * @param url 网站名称 比如http://www.baidu.com
 * @return
 * int 返回请求结果
 * 2015-1-1
 */
private int getByApacheHttp(String url) 
{
	int statusCode = -1;
	//建立一个网络请求
	HttpGet httpRequest = new HttpGet(url);
	HttpClient httpClient = new DefaultHttpClient();
	try {
		//执行请求网络。
		HttpResponse httpResponse = httpClient.execute(httpRequest);
		//获取网络状态吗
		statusCode = httpResponse.getStatusLine().getStatusCode(); 
		if( statusCode == HttpStatus.SC_OK)
		{
			//如果成功获取数据则打印日志。
			String strResult = EntityUtils.toString(httpResponse.getEntity());
			Log.d(TAG, &quot;getByAndroidHttp:&quot;+strResult);
		}else
		{
			Log.d(TAG,&quot;getByAndroidHttp errorCode :&quot;+ statusCode);
		}
	} catch (ClientProtocolException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	} catch (IOException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	return statusCode;
}
&lt;/code&gt;&lt;/pre&gt;

</description>
      </item>
    
      <item>
        <title>mou 常用快捷键</title>
        <link>http://disheng54.github.io/2014/12/24/mac-moushortcut.html</link>
        <guid isPermaLink="true">http://disheng54.github.io/2014/12/24/mac-moushortcut.html</guid>
        <pubDate>Wed, 24 Dec 2014 00:00:00 +0800</pubDate>
        <description>&lt;h4 id=&quot;view&quot;&gt;View&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;显示预览窗口 Toggle live preview: Shift + Cmd + I&lt;/li&gt;
  &lt;li&gt;显示字数 Toggle Words Counter: Shift + Cmd + W&lt;/li&gt;
  &lt;li&gt;将当前窗口设置为透明窗口 Toggle Transparent: Shift + Cmd + T&lt;/li&gt;
  &lt;li&gt;固定当前窗口 Toggle Floating: Shift + Cmd + F&lt;/li&gt;
  &lt;li&gt;编辑窗口和预览窗口相等 Left/Right = 1/1: Cmd + 0&lt;/li&gt;
  &lt;li&gt;编辑窗口和预览窗口的显示比例为 3:1 Left/Right = 3/1: Cmd + +&lt;/li&gt;
  &lt;li&gt;编辑窗口和预览窗口的显示比例为 1:3 Left/Right = 1/3: Cmd + -&lt;/li&gt;
  &lt;li&gt;文字方向 Toggle Writing orientation: Cmd + L&lt;/li&gt;
  &lt;li&gt;全屏显示开关 Toggle fullscreen: Control + Cmd + F&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;actions&quot;&gt;Actions&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Copy HTML: Option + Cmd + C&lt;/li&gt;
  &lt;li&gt;重点显示选中文本 Strong: Select text, Cmd + B&lt;/li&gt;
  &lt;li&gt;将选中文本斜体显示 Emphasize:Select text, Cmd + I&lt;/li&gt;
  &lt;li&gt;Inline Code: Select text, Cmd + K&lt;/li&gt;
  &lt;li&gt;加删除线 Strikethrough: Select text, Cmd + U&lt;/li&gt;
  &lt;li&gt;插入超链接 Link: Select text, Control + Shift + L&lt;/li&gt;
  &lt;li&gt;插入图像 Image: Select text, Control + Shift + I&lt;/li&gt;
  &lt;li&gt;选中当前单词 Select Word: Control + Option + W&lt;/li&gt;
  &lt;li&gt;选中当前行 Select Line: Shift + Cmd + L&lt;/li&gt;
  &lt;li&gt;选中所有 Select All: Cmd + A&lt;/li&gt;
  &lt;li&gt;取消选中所有 Deselect All: Cmd + D&lt;/li&gt;
  &lt;li&gt;将选中文本 转化为大写字母 Convert to Uppercase: Select text, Control + U&lt;/li&gt;
  &lt;li&gt;将选中文本 转化为小写字母 Convert to Lowercase: Select text, Control + Shift + U&lt;/li&gt;
  &lt;li&gt;将选中文本所有单词的首字母转为大写Convert to Titlecase: Select text, Control + Option + U&lt;/li&gt;
  &lt;li&gt;将选中文本插入编号 Convert to List: Select lines, Control + L&lt;/li&gt;
  &lt;li&gt;将选中文本转换成引用块 Convert to Blockquote: Select lines, Control + Q&lt;/li&gt;
  &lt;li&gt;将光标所在行转化为1级标题 Convert to H1: Cmd + 1&lt;/li&gt;
  &lt;li&gt;将光标所在行转化为2级标题 Convert to H2: Cmd + 2&lt;/li&gt;
  &lt;li&gt;将光标所在行转化为3级标题 Convert to H3: Cmd + 3&lt;/li&gt;
  &lt;li&gt;将当前行转化为4级标题 Convert to H4: Cmd + 4&lt;/li&gt;
  &lt;li&gt;将当前行转化为5级标题 Convert to H5: Cmd + 5&lt;/li&gt;
  &lt;li&gt;将当前行转化为6级标题 Convert to H6: Cmd + 6&lt;/li&gt;
  &lt;li&gt;Convert Spaces to Tabs: Control + [&lt;/li&gt;
  &lt;li&gt;Convert Tabs to Spaces: Control + ]&lt;/li&gt;
  &lt;li&gt;插入当前日期 Insert Current Date: Control + Shift + 1&lt;/li&gt;
  &lt;li&gt;插入当前时间 Insert Current Time: Control + Shift + 2&lt;/li&gt;
  &lt;li&gt;插入&amp;lt;符号 Insert entity &amp;lt;: Control + Shift + ,&lt;/li&gt;
  &lt;li&gt;插入&amp;gt;符号 Insert entity &amp;gt;: Control + Shift + .&lt;/li&gt;
  &lt;li&gt;插入$符号 Insert entity &amp;amp;: Control + Shift + 7&lt;/li&gt;
  &lt;li&gt;Insert entity Space: Control + Shift + Space&lt;/li&gt;
  &lt;li&gt;Insert Scriptogr.am Header: Control + Shift + G&lt;/li&gt;
  &lt;li&gt;左缩进 Shift Line Left: Select lines, Cmd + [&lt;/li&gt;
  &lt;li&gt;右缩进 Shift Line Right: Select lines, Cmd + ]&lt;/li&gt;
  &lt;li&gt;插入下一行 New Line: Cmd + Return&lt;/li&gt;
  &lt;li&gt;添加注释 Comment: Cmd + /&lt;/li&gt;
  &lt;li&gt;插入换行符 Hard Linebreak: Control + Return&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;edit&quot;&gt;Edit&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;自动完成单词 Auto complete current word: Escape&lt;/li&gt;
  &lt;li&gt;查找 voiceFind: Cmd + F&lt;/li&gt;
  &lt;li&gt;取消查找框 Close find bar: Esc&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;post&quot;&gt;Post&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;Post on Scriptogr.am: Control + Shift + S&lt;/li&gt;
  &lt;li&gt;提交到 Tunblr Post on Tumblr: Control + Shift + T&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;export&quot;&gt;Export&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;导出为HTML格式文件 Export HTML: Option + Cmd + E&lt;/li&gt;
  &lt;li&gt;导出为PDF格式文件 Export PDF:  Option + Cmd + P&lt;/li&gt;
&lt;/ul&gt;
</description>
      </item>
    
      <item>
        <title>mac 常用快捷键</title>
        <link>http://disheng54.github.io/2014/12/10/mac-shortcut.html</link>
        <guid isPermaLink="true">http://disheng54.github.io/2014/12/10/mac-shortcut.html</guid>
        <pubDate>Wed, 10 Dec 2014 00:00:00 +0800</pubDate>
        <description>&lt;h1 id=&quot;mac-&quot;&gt;mac 常用快捷键&lt;/h1&gt;
&lt;p&gt;### 系统通用：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;   Command＋A   全部选中文件
   Option＋Command＋A 取消全部选中的文件。
   Command＋c   拷贝选中的文件
   Command＋D   复制所选项
   Command＋v   粘贴选中的文件
   Command＋X   剪切选中的文件
   Command＋Z   撤销上一步操作
   Shift+Command+Z 撤销刚才的撤销
   
   Command + tab 切换到上一个窗口
   Command + W   关闭当前窗口
   Option ＋ Command ＋ W 关闭所有的窗口
   Shift +Option + Command +EESC  强制退出当前的应用程序
   Command ＋ N 复制当前的应用，新生成一个窗口
   Command ＋ M 最小化窗口
   Shift ＋ Command ＋ M  ／／最小化所有窗口
   Command + ] 向后
   Command + [ 向前
   
   Command ＋ shift ＋ ？ 打开帮助
   
   Control ＋ A：移动到段落和行的开始。
   Control ＋ E： 移动到段落和行的开始
   Control ＋ B；向后移动一个字符
   Control ＋ F；向前移动一个字符	   
   Control ＋ D：删除光标前的字符
   Control ＋ H： 删除光标后的字符
   Control ＋ K：删除光标到行或者到断尾的内容
   Control ＋ L：显示在区域位置中间
   Control ＋ N：下移一行
   Control ＋ P：上移一行
   Control ＋ O ： 在光标后插入一行
   Control ＋ T：将光标前后的字好准备。
   Control ＋ V：进入下页。 ###  Finder
   shift + Command + A 打开应用程序
   shift + command + D 打开桌面文件夹
   shift + Command + C 打开电脑窗口
   shift + Command + U 打开实用工具
   shift + Command + G 打开前往
   shift + Command + F 打开所有的我的所有文件
   shift + Command + O 打开文稿
   shift + Command + L 下载
   shift + Command + H 个人
   shift + Command + J iCloud Drive
   shift + Command + R AirDrop          
   Command + K 连接服务器
   
   Command + 上箭头 打开所含的文件夹
   Control + Command + 上箭头 新窗口中打开上级文件夹
   
   Command + J 调出显示选项       
   COmmand ＋ i 查看简介
   空格键 快速查看
   Option ＋ Command ＋ Y ： 以浏览的方式打开
   shift ＋ Command ＋ N 新建文件夹
   
   Command ＋delete  移到废纸篓
   shift ＋Command ＋ delete 清到废纸篓
   Option ＋ shift ＋ Command ＋ delete： 不提示删除废纸篓。
&lt;/code&gt;&lt;/pre&gt;

</description>
      </item>
    
      <item>
        <title>activity的常见问题</title>
        <link>http://disheng54.github.io/2014/12/10/android-activity.html</link>
        <guid isPermaLink="true">http://disheng54.github.io/2014/12/10/android-activity.html</guid>
        <pubDate>Wed, 10 Dec 2014 00:00:00 +0800</pubDate>
        <description>&lt;p&gt;##1 . 什么是activity？&lt;/p&gt;

&lt;p&gt;##2 . 描述一下activity的声明周期？&lt;/p&gt;

&lt;p&gt;##3 . 如何退出已调用多个activity的app？&lt;/p&gt;

&lt;p&gt;##4 . 后台activity如何在被系统回收之前，保存数据状态？&lt;/p&gt;

&lt;p&gt;##5 . activity在屏幕旋转时的生命周期?&lt;/p&gt;

&lt;p&gt;##6 . activity的四种启动模式?&lt;/p&gt;

&lt;p&gt;##7 . activity和task相关的启动模式有?&lt;/p&gt;

&lt;p&gt;##8 . 两个activity之间跳转必然要执行的方法?&lt;/p&gt;

&lt;p&gt;##9 . 如何将一个activity设置成窗口样式?&lt;/p&gt;

&lt;p&gt;##10 . 如何通过Intent启动一个系统app都有哪些?&lt;/p&gt;

</description>
      </item>
    
  </channel>
</rss>